#!/bin/bash

# Directory to save data
output_dir="pokemon_data"
mkdir -p "$output_dir"

# List of Pok√©mon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Log file
log_file="failed_parallel.log"
> "$log_file"

# Max retries and timeout
max_retries=3
timeout=10  # seconds

# Function to fetch with retries
fetch_pokemon() {
    local name=$1
    local attempt=1
    local success=false

    while [ $attempt -le $max_retries ]; do
        curl -s --fail "https://pokeapi.co/api/v2/pokemon/$name" -o "$output_dir/$name.json"
        if [ $? -eq 0 ]; then
            echo "‚úÖ $name saved."
            success=true
            break
        else
            echo "‚ùå $name attempt $attempt failed."
            ((attempt++))
            sleep 1
        fi
    done

    if [ "$success" = false ]; then
        echo "$name" >> "$log_file"
    fi
}

# Track PIDs
pids=()
names=()

# Start fetches in background
for name in "${pokemon_list[@]}"; do
    fetch_pokemon "$name" &
    pid=$!
    pids+=($pid)
    names+=($name)
done

# Monitor with timeout and kill if needed
for i in "${!pids[@]}"; do
    pid=${pids[$i]}
    name=${names[$i]}

    (
        sleep $timeout
        if kill -0 "$pid" 2>/dev/null; then
            echo "‚ö†Ô∏è Timeout! Killing $name process (PID $pid)"
            kill "$pid"
            echo "$name" >> "$log_file"
        fi
    ) &
done

# Wait for all background processes
wait

# Report
echo ""
echo "‚úÖ All background fetches completed."
if [ -s "$log_file" ]; then
    echo "‚ö†Ô∏è Failures logged in $log_file"
else
    echo "üéâ All Pok√©mon data fetched successfully."
fi

