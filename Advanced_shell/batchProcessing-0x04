#!/bin/bash

# Directory to store fetched JSON files
output_dir="pokemon_data"
mkdir -p "$output_dir"

# List of Pok√©mon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Log file for failed requests
log_file="failed_parallel.log"
> "$log_file"  # Clear log file

# Max retries per Pok√©mon
max_retries=3

# Array to track background job PIDs
pids=()

# Function to fetch Pok√©mon data with retries
fetch_pokemon() {
    local name=$1
    local attempt=1
    local success=false

    echo "Fetching $name..."

    while [ $attempt -le $max_retries ]; do
        curl -s --fail "https://pokeapi.co/api/v2/pokemon/$name" -o "$output_dir/$name.json"
        if [ $? -eq 0 ]; then
            echo "‚úÖ $name saved to $output_dir/$name.json"
            success=true
            break
        else
            echo "‚ùå $name attempt $attempt failed."
            ((attempt++))
            sleep 1
        fi
    done

    if [ "$success" = false ]; then
        echo "$name" >> "$log_file"
        echo "‚ùå Failed to fetch $name after $max_retries retries"
    fi
}

# Trap to kill background jobs if script is interrupted
cleanup() {
    echo -e "\nüõë Script interrupted. Killing background jobs..."
    for pid in "${pids[@]}"; do
        kill "$pid" 2>/dev/null
    done
    exit 1
}

trap cleanup SIGINT

# Export function if needed for subshells
export -f fetch_pokemon

# Start background processes
for name in "${pokemon_list[@]}"; do
    fetch_pokemon "$name" &
    pids+=($!)  # Store PID
done

# Wait for all to finish
wait

echo ""
echo "‚úÖ All fetch processes completed."

# Report failures
if [ -s "$log_file" ]; then
    echo "‚ö†Ô∏è Some fetches failed. See $log_file for details."
else
    echo "üéâ All Pok√©mon data fetched successfully."
fi

